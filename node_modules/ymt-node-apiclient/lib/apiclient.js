/********************************************************************
 * Copyright (C) 2016 上海洋码头网络技术有限公司. All Rights Reserved.
 *
 * @author tongliang
 * @email tongliang@ymatou.com
 * @date 2016/3/23
 *
 ********************************************************************
 */

'use strict';

var req = require('request');
var assert = require('assert');
var url = require('url'), _defaultTimeout = 5000;

var apiClient = function (options) {
  assert(options, 'options is necessary');
  assert(options.host, 'options.host is necessary');
  this.host = options.host;
  this.path = options.path;
  this.method = options.method || 'get';
  this.headers = options.headers || {};
  this.timeout = options.timeout || _defaultTimeout;
  if (this.headers['User-Agent'] === undefined) {
    this.headers['User-Agent'] = 'ymt-node-apiclient';
  }
  
};

apiClient.prototype.baseRequest = function (params, callback) {
  if (!this.path) this.path = '';
  var reqUrl = url.resolve(this.host, this.path);
  if (typeof params === 'function') {
    callback = params;
    params = {};
  }
  var reqOptions = {
    method: this.method,
    url: reqUrl,
    headers: this.headers,
    forever: true
  };
  if (this.method === 'get') {
    reqOptions.qs = params;
  }
  else if (this.method === 'post') {
    reqOptions.body = JSON.stringify(params);
  }
  if (this.timeout) {
    reqOptions.timeout = this.timeout;
  }
  req(reqOptions, function (error, response, body) {
    if (!error && response && response.statusCode == 200) {
      try {
        var _body = JSON.parse(body);
        var result = undefined;
        result = _body;
      }
      catch (e) {
        return callback(e);
      }
      return callback(null, result);
    } else if (error) {
      return callback(error);
    } else {
      if (!response) response = {};
      return callback(new Error('http code:' + response.statusCode + ' body:' + body));
    }
  });
};

exports = module.exports = function (options, paramsOrCallback, callback) {
  var ac = new apiClient(options);
  if (typeof paramsOrCallback === 'function') {
    callback = paramsOrCallback;
    paramsOrCallback = null;
  }
  return ac.baseRequest(paramsOrCallback, function (err, body) {
    if (body) {
      var result = undefined;
      if (body.status != 200) {
        result = body;
      }
      else {
        result = body['result'] || body['Result'] || undefined;
      }
      return callback(null, result)
    }
    return callback(err, body);
  });
};

exports.exec = function (options, paramsOrCallback, callback) {
  var ac = new apiClient(options);
  if (typeof paramsOrCallback === 'function') {
    callback = paramsOrCallback;
    paramsOrCallback = null;
  }
  return ac.baseRequest(paramsOrCallback, callback);
};


exports.callSearch = function (options, appInfo, paramObj, callback) {
  //需接入appInfo中间件后使用
  var infos = [];
  infos.push('userid:' + appInfo.userId);
  infos.push('cookieid:' + appInfo.deviceId);
  if (appInfo.idfa) infos.push('idfa:' + appInfo.idfa);
  if (appInfo.imei) infos.push('imei:' + appInfo.imei);
  if (!paramObj.info) paramObj.info = infos.join(',');
  if (!paramObj.yid) paramObj.yid = 'yid:' + appInfo.yId;
  if (!paramObj.requestid) paramObj.requestid = appInfo.requestId;
  if (!paramObj.platform) paramObj.platform = 'appbuyer';

  exports.exec(options, paramObj, callback);
};

/**
 * 设置apiClient超时默认值
 * @param timeout 超时时间（单位毫秒），不设置，默认5000毫秒
 */
exports.setDefaultTimeout = function (timeout) {
  assert(typeof timeout === 'number', 'default timeout type error, should be number');
  _defaultTimeout = timeout;
};