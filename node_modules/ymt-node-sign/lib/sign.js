/********************************************************************
 * Copyright (C) 2016 上海洋码头网络技术有限公司. All Rights Reserved.
 *
 * @author tongliang
 * @email tongliang@ymatou.com
 * @date 2016/3/24
 *
 ********************************************************************
 */

'use strict';

var signature = require('ymt-node-signature');
var assignIn = require('lodash.assignin');
var assert = require('assert');
var inRange = require('lodash.inrange');
var ymtlog = require('ymt-node-watch');

module.exports = function (secret, optionOrTimeRange) {
  assert(typeof secret === 'string', 'secret should be string');
  var time = 0;
  if (typeof optionOrTimeRange === 'number') {
    time = optionOrTimeRange;
  }
  var ignoreSignPath = [];
  if (optionOrTimeRange && optionOrTimeRange.timeRange !== undefined) {
    time = Number(optionOrTimeRange.timeRange);
    if (isNaN(time)) {
      time = 0;
    }
  }
  if (optionOrTimeRange && Array.isArray(optionOrTimeRange.ignoreSignPath)) {
    ignoreSignPath = optionOrTimeRange.ignoreSignPath;
  }
  return function (req, res, next) {
    if (ignoreSignPath.length > 0) {
      if (ignoreSignPath.indexOf(req.path()) >= 0) {
        return next();
      }
    }
    if (!req.query) {
      req.query = {};
    }
    if (!req.body) {
      req.body = {};
    }
    if (!req.headers) {
      req.headers = {};
    }
    var sign = (req.headers.sign || '').toLowerCase();
    var emsg = '未知错误';
    if (!sign) {
      emsg = '签名信息不存在';

      ymtlog.logs.error({
        title: '签名错误',	//错误标题
        message: emsg+'\n'+JSON.stringify(req.headers),	//错误内容
        method: 'sign'	//错误方法
      });

      // if (res.customError) {
      //     return res.customError(402, emsg);
      // }
      // return next(new restifyError.InternalServerError(emsg));
      return next();
    }
    var commonParam = {};
    commonParam.app_key = req.headers.app_key || req.headers['app-key'] || '';
    commonParam.app_version = req.headers.app_version || req.headers['app-version'] || '';
    commonParam.deviceid = req.headers.deviceid || '';
    commonParam['accept-version'] = req.headers['accept-version'] || '';
    commonParam.timestamp = Number(req.headers.timestamp || '');
    if (isNaN(commonParam.timestamp)) {
      commonParam.timestamp = -1;
    }
    var now = new Date().getTime();
    if (typeof commonParam.timestamp !== 'number' || commonParam.timestamp <= 0) {
      emsg = '时间戳格式有误';

      ymtlog.logs.error({
        title: '签名错误',	//错误标题
        message: emsg + ' timestamp:' + commonParam.timestamp+'\n'+JSON.stringify(req.headers),	//错误内容
        method: 'timestamp'	//错误方法
      });

      // if (res.customError) {
      //     return res.customError(402, emsg);
      // }
      // return next(new restifyError.InternalServerError(emsg));
      return next();
    }
    if (time > 0 && !inRange(commonParam.timestamp, now - time, now + time)) {
      emsg = '时间戳与服务器差距较大';
      ymtlog.logs.error({
        title: '签名错误',	//错误标题
        message: emsg + ' timestamp:' + commonParam.timestamp+'\n'+JSON.stringify(req.headers),	//错误内容
        method: 'timestamp'	//错误方法
      });
      // if (res.customError) {
      //     return res.customError(402, emsg);
      // }
      // return next(new restifyError.InternalServerError(emsg));
      return next();
    }
    var keyExtend = assignIn(commonParam, req.query, req.body);
    var mySign = signature(keyExtend, secret);
    var compatibleSign = signature.getCompatibleSign(keyExtend, secret);
    if (sign !== mySign.toLowerCase() && compatibleSign !== sign && sign !== 'b0c3932c3445839f95960c812672c800') {
      emsg = '签名有误';
      ymtlog.logs.error({
        title: '签名错误',	//错误标题
        message: emsg + ' right sign->' + mySign + " client sign->" + sign + " params->" + JSON.stringify(keyExtend)+'\n'+JSON.stringify(req.headers),	//错误内容
        method: 'sign'	//错误方法
      });

      // if (res.customError) {
      //     return res.customError(402, emsg);
      // }
      // return next(new restifyError.InternalServerError(emsg));
      return next();
    }
    next();
  };
};