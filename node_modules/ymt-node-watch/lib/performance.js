/*
 * Performance Server
 * appId
 * host
 * port
 * path
 * open
 * loopTime
 */

'use strict';

var http = require('http'),
	onFinished = require('on-finished'),
	onHeaders = require('on-headers'),
	querystring = require('querystring');

var logger = require('./logger');

var PHRServer,
	localData = {};

/**
 * parse localDate to serverData
 * @param  {Object}   localData [localData]
 * @param  {Function} callback 
 */
var parseObject = function(localData, callback) {

	var pusDate = new Date();

	var serverData = [];

	for (var i in localData) {

		var UrlCounters = [];

		for (var t in localData[i]['PerfData']['UrlCounters']) {
			UrlCounters.push(localData[i]['PerfData']['UrlCounters'][t])
		}

		serverData.push({
			"AppId": PHRServer.appId || '',
			"Ip": "",
			"Type": "url",
			"Counter": localData[i]['Counter'] || '',
			"PerfData": {
				"UrlCounters": UrlCounters || [],
				"IndexId": null,
				//"Date": '' + pusDate.getFullYear() + pusDate.getMonth() + pusDate.getDate(),
				//"Time": '' + pusDate.getHours() + pusDate.getMinutes(),
				'Date': formatDate(pusDate, 'yyyyMMdd'),
				'Time': formatDate(pusDate, 'HHmm'),
				"Value": 1
			}
		})

	}

	callback(null, serverData);
}


var isGUID = function(str) {
	return /^[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}$/.test(str);
};

var parseUrl = function(ourl) {

	var rurl = '',
		url = ourl,
		noParamsUrl = url.split('?')[0],
		nowUrl = noParamsUrl.substr(1).split('/');

	if (isGUID(nowUrl[nowUrl.length - 1])) {
		for (var i = 0; i < (nowUrl.length - 1); i++) {

			if (nowUrl[i] !== 'forBuyerApp') {
				rurl += ('/' + nowUrl[i]);
			}
		}
	} else {
		for (var i = 0; i < (nowUrl.length); i++) {
			if (nowUrl[i] !== 'forBuyerApp') {
				rurl += ('/' + nowUrl[i]);
			}
		}
	}
	return rurl;
};

var filter = function(req, res) {

	if(!req||!res){
		console.error('[PerfmonHttpRequest]: not params of filter')
		return false;
	}

	return true;

};

//post data to monitor server
var pushServer = function() {

	if (localData && Object.keys(localData).length === 0) {
		return;
	}

	parseObject(localData, function(err, result) {

		if (!err) {

			if (!err) {

			try {
				var data = JSON.stringify(result);
			} catch (e) {
				return;
			}

			var options = {
				hostname: PHRServer.host,
				port: PHRServer.port,
				path: PHRServer.path,
				method: 'post',
				headers: {
					'User-Agent': 'node-perfmonHttpRequest',
					'Content-Type': 'application/json; charset=utf-8',
					"Content-Length": Buffer.byteLength(data, 'utf8')
				}
			};

			var req = http.request(options, function(res) {
				var body = '';
				res.setEncoding('utf8');
				res.on('data', function(data) {
					body += data
				}).on('end', function(){
					console.log(body);
					//return body
				})
			});

			req.on('error', function(e) {
				console.error(e); //error
				return;
			});
			req.write(data + "\n");
			req.end()
		}
		}
	})

	localData = {};

}


//ms sort
var getTimeType = function(ms) {
	if (ms < 10) return 'Lt10';
	if (ms < 20) return 'Lt20';
	if (ms < 50) return 'Lt50';
	if (ms < 100) return 'Lt100';
	if (ms < 200) return 'Lt200';
	//if (ms < 300) return 'Lt300';
	if (ms < 500) return 'Lt500';
	if (ms < 1000) return 'Lt1000';
	if (ms < 2000) return 'Lt2000';
	if (ms < 3000) return 'Lt3000';
	if (ms < 5000) return 'Lt5000';
	if (ms < 10000) return 'Lt10000';
	if (ms >= 10000) return 'Gt10000';
}


var PERFORMANCE = module.exports = function(opt){

	//check is runing
	if (!opt || !opt.open) {
		!opt ? console.error('[PerfmonHttpRequest]: No configuration') : '';
		return function(req, res, next) {
			next()
		};
	}

	//push address
	if (opt && opt.host && opt.port && opt.path) {
		PHRServer = {
			appId: opt.appId,
			host: opt.host,
			port: opt.port,
			path: opt.path
		};
	} else {
		console.error("[PerfmonHttpRequest]: Config Error Of Domin");
		return function(req, res, next) {
			next()
		};
	}



	//push request Time
	var setTimePush = setInterval(function() {
		pushServer();
	}, opt.loopTime || 30000);


	//set request start time
	function recordStartTime() {
		this._startAt = process.hrtime();
		this._startTime = new Date();
	}

	//insert push
	var insertRequest = function(path, ms) {

		if (!path || !ms) {
			return 0;
		}

		var msType = getTimeType(ms || 0);

		if (localData[path]) {
			if (localData[path]['PerfData']['UrlCounters'][msType]) {
				localData[path]['PerfData']['UrlCounters'][msType]['V'] += 1
			} else {
				localData[path]['PerfData']['UrlCounters'][msType] = {
					"K": msType,
					"V": 1
				}
			}
		} else {
			localData[path] = {
				"AppId": PHRServer.host,
				"Ip": "",
				"Type": "url",
				"Counter": path,
				"PerfData": {
					"UrlCounters": {},
					"IndexId": null,
					"Date": "",
					"Time": "",
					"Value": 1
				}
			}

			localData[path]['PerfData']['UrlCounters'][msType] = {
				"K": msType,
				"V": 1
			}
		}

	}


	return function(req, res, next) {

		//Logger
		logger.getClientInfo(req);

		// var pars = req.headers["ymt-pars"] || req.headers["ymt_pars"];
		// var info = querystring.parse(pars) || {};
    //
		// logger.logDebug('url:'+req.url+',\nuserId:'+info.userid+'\nbody:'+req._body);
		//get http request ms
		function getRequestTime() {

			var ms;

			try {
				ms = (res._startAt[0] - req._startAt[0]) * 1e3 + (res._startAt[1] - req._startAt[1]) * 1e-6;
			} catch (e) {
				ms = null;
			}

			if (ms) {
				return ms.toFixed(0);
			}

		}

		recordStartTime.call(req);

		//request finished
		function finishedTime() {



			if (filter(req, res) && getRequestTime()) {
				insertRequest(parseUrl(req.originalUrl || req.url), getRequestTime());
			}
		}

		onHeaders(res, recordStartTime);
		onFinished(res, finishedTime);

		next();
	}

};

var formatDate = function (date, fmt) {
	if (!date) date = new Date();
	fmt = fmt || 'yyyy-MM-dd HH:mm';
	var o = {
		'M+': date.getMonth() + 1, //月份
		'd+': date.getDate(), //日
		'h+': date.getHours() % 12 === 0 ? 12 : date.getHours() % 12, //小时
		'H+': date.getHours(), //小时
		'm+': date.getMinutes(), //分
		's+': date.getSeconds(), //秒
		'q+': Math.floor((date.getMonth() + 3) / 3), //季度
		'S': date.getMilliseconds() //毫秒
	};
	var week = {
		'0': '/u65e5',
		'1': '/u4e00',
		'2': '/u4e8c',
		'3': '/u4e09',
		'4': '/u56db',
		'5': '/u4e94',
		'6': '/u516d'
	};
	if (/(y+)/.test(fmt)) {
		fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));
	}
	if (/(E+)/.test(fmt)) {
		fmt = fmt.replace(RegExp.$1, ((RegExp.$1.length > 1) ? (RegExp.$1.length > 2 ? '/u661f/u671f' : '/u5468') : '') + week[date.getDay() + '']);
	}
	for (var k in o) {
		if (new RegExp('(' + k + ')').test(fmt)) {
			fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (('00' + o[k]).substr(('' + o[k]).length)));
		}
	}
	return fmt;
};