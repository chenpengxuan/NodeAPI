/**
 * 上传错误日志 写入本地日志
 * HTTP Method POST
 * http://alarm.alpha.ymatou.com/Alarm/SaveSingle
 *
 * @param AppId         系统ID(域名)
 * @param ReqUrl        请求URL
 * @param ReqForm       访问请求信息
 * @param ErrorLevel    错误级别-Error/Fatal/Warning
 * @param MethodName    出错的方法名
 * @param AssemblyName  出错类库名
 * @param Title         报错信息头
 * @param Message       错误信息
 * @param ExceptionName 异常类型名
 * @param Header        头信息
 * @param StackTrace    错误堆栈信息
 * @param AddTime       添加时间
 * @param MachineIp     本地服务器IP
 *
 * @Return
 * {
 *      Result:true
 * }
 */

'use strict';
var http = require('http');
var qs = require('querystring');
var log4js = require('log4js');

var logsSetting={};
var clientInfo={};
var bLogLocal = false;
var logger,debug;
var path = require('path');

var LOGS = module.exports = {};

var pushData=function(data){

	//var data = qs.stringify(data);
	data = JSON.stringify(data);

	var options = {
			hostname: logsSetting.host,
			port: logsSetting.port,
			path: logsSetting.path,
			method: 'post',
			headers: {
				'User-Agent': 'node-perfmonHttpRequest',
				'Content-Type': 'application/json;',
				"Content-Length": Buffer.byteLength(data, 'utf8')
			}
		};

	var req = http.request(options,function(res){
		var body = '';
			res.setEncoding('utf8');
			res.on('data', function(data) {
				body += data
			}).on('end', function(){
				console.log('one error logged');
				return body
			})
			res.on('error',function(e){
				console.error('log http error:',e);
			})
	});

	req.on('error', function(e) {
		console.error(e);
		return;
	});
	req.write(data);
	req.end()
};


LOGS.SET=function(opt, localLogOpt){

	if(!opt.appId||!opt.host||!opt.path||!opt.port){
		console.error('[Logger.SET] configuration parameter error');
		return;
	}

	logsSetting=opt;

	var mkdir = require('mkdir-p');

	bLogLocal = localLogOpt && localLogOpt.path;

	if (bLogLocal) {
		var dir = localLogOpt.path.substring(0,localLogOpt.path.lastIndexOf('/'));
		mkdir.sync(dir);
		log4js.configure({
			appenders: [
				{
					"type": "file",
					"filename": localLogOpt.path,
					"maxLogSize": 10240000,
					"category": "logger"
				},
				{
					"type": "file",
					"filename": path.join(dir,'debug.log'),
					"maxLogSize": 10240000,
					"category": "debug"
				}
			]
		});

		logger = log4js.getLogger('logger');
		debug = log4js.getLogger('debug');
		console.log('start log local, path:',localLogOpt.path);
		logger.debug('start log local, path:',localLogOpt.path);
	}
};

LOGS.getClientInfo=function(req){

	clientInfo={
		ReqUrl: req.headers['host'] + req.url,
        ReqForm: req.body||{},
        Header: req.headers,
        MachineIp: req.headers['HTTP_Cdn_Src_Ip'] || req.headers['cdn_src_ip'] || '',

        User:{
            UserId:req.query.UserId||null,
            AccessToken:req.query.AccessToken||null,
            DeviceToken:req.query.DeviceToken||null
        }
	}
};

LOGS.error=function(error){
	if(!error||typeof error !== 'object'){
		console.error('[Logger.Error] not parameter or parameter not object');
		return 0;
	}
	if(!error.message||!error.title||!error.method){
		console.error('[Logger.Error] configuration parameter error');
		return 0;
	}

	if (logger) logger.error(JSON.stringify(error));
	pushData({
		Title:error.title,
		MethodName:error.method,
		Message:error.message,

		AppId:logsSetting.appId,
		ReqUrl:clientInfo.ReqUrl,
		ReqForm:clientInfo.ReqForm,
		ErrorLevel:'Error',
		AssemblyName:'',
		ExceptionName:'',
		Header:clientInfo.Header,
		StackTrace:'',
		AddTime:new Date(),
		MachineIp:clientInfo.MachineIp
	})
}

LOGS.Fatal=function(error){

	if(!error||typeof error !== 'object'){
		console.error('[Logger.Fatal] not parameter or parameter not object');
		return 0;
	}
	if(!error.message||!error.title||!error.method){
		console.error('[Logger.Fatal] configuration parameter error');
		return 0;
	}

	if (logger) logger.fatal(JSON.stringify(error));
	pushData({

		Title:error.title,
		MethodName:error.method,
		Message:error.message,

		AppId:logsSetting.appId,
		ReqUrl:clientInfo.ReqUrl,
		ReqForm:clientInfo.ReqForm,
		ErrorLevel:'Fatal',
		AssemblyName:'',
		ExceptionName:'',
		Header:clientInfo.Header,
		StackTrace:'',
		AddTime:new Date(),
		MachineIp:clientInfo.MachineIp
	})
}

LOGS.warn=function(error){
	if(!error||typeof error !== 'object'){
		console.error('[Logger.Fatal] not parameter or parameter not object');
		return 0;
	}
	if(!error.message||!error.title||!error.method){
		console.error('[Logger.Fatal] configuration parameter error');
		return 0;
	}

	if (logger) logger.warn(JSON.stringify(error));

	pushData({
		Title:error.title,
		MethodName:error.method,
		Message:error.message,
		AppId:logsSetting.appId,
		ReqUrl:clientInfo.ReqUrl,
		ReqForm:clientInfo.ReqForm,
		ErrorLevel:'Fatal',
		AssemblyName:'',
		ExceptionName:'',
		Header:clientInfo.Header,
		StackTrace:'',
		AddTime:new Date(),
		MachineIp:clientInfo.MachineIp
	})
};

LOGS.logLocal = function (msg) {
	try {
		if (logger) logger.error(msg);
	}
	catch (e) {
		console.log(e);
	}
};

LOGS.logDebug = function (msg) {
	try {
		if (debug) debug.debug(msg);
	}
	catch (e){
		console.log(e);
	}
}